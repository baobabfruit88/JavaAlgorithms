package com.baobabfruit.site.algorithms;

import java.util.ArrayList;

public class eulerProblemTwo {
    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     */
    public static ArrayList<Integer> fibonacci (int max){
        ArrayList<Integer>fibonacciSequence = new ArrayList<>();
        int previous = 1;
        int current = 1;
        int interMediate = 0;

        while (true){
            interMediate = previous + current;
            if(interMediate > max){break;}
            fibonacciSequence.add(interMediate);
            current = previous;
            previous = interMediate;
        }
        return fibonacciSequence;
    }
    public static ArrayList<Integer>extractEvenNumbers(ArrayList<Integer>numberList){
        ArrayList<Integer>evenNumbers = new ArrayList<>();
        for (Integer num:numberList
             ) {
            if(num % 2 == 0){
                evenNumbers.add(num);
            }
        }
        return evenNumbers;
    }
}
